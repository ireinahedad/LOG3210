options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" > |
	< DO: "do" > |
	< WHILE: "while" > |
	< SWITCH: "switch" > |
	< CASE: "case" > |
    < DEF: "default">|
    < FOR: "for"> |
    < FUNC: "func"> |
    < RET: "return">
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	//< REAL: <INTEGER> "." (["0"-"9"])* > |

	// 2.5
    	< EXPONENT: "e+" | "E+" > |
    	< REAL: (<INTEGER>)? "." (<INTEGER>)? (<EXPONENT> <INTEGER>)?>
}




//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}



void Block() #void : { }
{
	 ( Stmt() )*
}



void Stmt() #void : { }
{
    LOOKAHEAD(3)AssignStmt() <SEMICOLON> |
    WhileStmt() |
    DoWhileStmt() <SEMICOLON> |
    IfStmt() |
    FunctionStmt() |
    ForStmt()
}

void Content() #void : { }
{
    WhileStmt() |
    DoWhileStmt() <SEMICOLON> |
    IfStmt() |
    ForStmt()
}

void AssignStmt() : { Token t;}
{
	Identifier() <ASSIGN> Expr()
}


void Expr() #void : {}
{
   // BasicExpr()
    LogicExpr()
}

void BasicExpr() #void : {}
{
	Identifier() |
	IntValue() |
    RealValue()
}

void FunctionStmt() #void: {}
{
    <FUNC>#FunctionStmt Identifier() FunctionArgs()
    <LACC>
    (Stmt())? ReturnStmt()
    <RACC>
}

void FunctionArgs() #void : {}
{
<LPAREN> (ArgumentList() <RPAREN> | <RPAREN> )
}


void ReturnStmt() #void: {}
{
 (<RET>#ReturnStmt LogicExpr() <SEMICOLON>)?
}



void ArgumentList() #void : {}
{
    BasicExpr() ( <COMMA> Identifier() )*
}




void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}

// 2.1

void WhileStmt() : { Token t; }
{
    <WHILE> <LPAREN> Expr() <RPAREN>
    (<LACC> Block() <RACC>
    |
    Stmt())
}

void DoWhileStmt() : { Token t; }
{
    <DO> <LACC>
    Block()
    <RACC> <WHILE> <LPAREN> Expr() <RPAREN>
}

// 2.2
void IfStmt(): {}
{
    <IF> <LPAREN> Expr() <RPAREN> (<LACC> Block() <RACC> | Stmt())
    [LOOKAHEAD(2) <ELSE> (<LACC> Block() <RACC> | Stmt())] <SEMICOLON>
}


// 2.3
void ForStmt(): {}
{
    <FOR> <LPAREN> [AssignStmt()] <SEMICOLON> [Expr()] <SEMICOLON> [AssignStmt()] <RPAREN>
    (Stmt() | <LACC> Block() <RACC>)
}

// 2.4
void ParenthesisExpr() #void: {}
{
    <LPAREN> LogicExpr()#Parentheses <RPAREN> |
    BasicExpr()

}



void NotExpr() #void: {}
{
    ParenthesisExpr() |
    <NOT> NotExpr()#Not
}

void NegationExpr() #void: {}
{
    NotExpr() |
    <MINUS> NegationExpr()#Minus
}

void MulExpr() #void: {}
{
    (NegationExpr() (<FOIS> NegationExpr())*)#Multi(>1)
}

void DivExpr() #void: {}
{
    (MulExpr() (<DIV> MulExpr())*)#Division(>1)
}

void AddExpr() #void : {}
{
    (DivExpr() (<PLUS> DivExpr())*)#Addition(>1)
}

void SubExpr() #void : {}
{
    (AddExpr() (<MINUS> AddExpr())*)#Soustraction(>1)
}

void CompareExpr() #void: {}
{
    (SubExpr() (<COMPARE> SubExpr())*)#Compare(>1)
}

void LogicExpr() #void: {}
{
    (CompareExpr() (<LOGIC> CompareExpr())?)#Logic(>1)

}
